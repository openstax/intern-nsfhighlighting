
//
// element-dataset 1.2.0
//
// element-dataset is released under the terms of the BSD-3-Clause license.
// (c) 2015 - 2016 Mark Milstein <mark@epiloque.com>
//
// For all details and documentation: https://github.com/epiloque/element-dataset
//

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.elementDataset = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
'use strict';

function elementDatasetPolyfill() {
	if (!document.documentElement.dataset && (!Object.getOwnPropertyDescriptor(Element.prototype, 'dataset') || !Object.getOwnPropertyDescriptor(Element.prototype, 'dataset').get)) {
		var descriptor = {};

		descriptor.enumerable = true;

		descriptor.get = function () {
			var element = this;
			var map = {};
			var attributes = this.attributes;

			function toUpperCase(n0) {
				return n0.charAt(1).toUpperCase();
			}

			function getter() {
				return this.value;
			}

			function setter(name, value) {
				if (typeof value !== 'undefined') {
					this.setAttribute(name, value);
				} else {
					this.removeAttribute(name);
				}
			}

			for (var i = 0; i < attributes.length; i++) {
				var attribute = attributes[i];

				// This test really should allow any XML Name without
				// colons (and non-uppercase for XHTML)

				if (attribute && attribute.name && /^data-\w[\w\-]*$/.test(attribute.name)) {
					var name = attribute.name;
					var value = attribute.value;

					// Change to CamelCase

					var propName = name.substr(5).replace(/-./g, toUpperCase);

					Object.defineProperty(map, propName, {
						enumerable: this.enumerable,
						get: getter.bind({ value: value || '' }),
						set: setter.bind(element, name)
					});
				}
			}
			return map;
		};

		Object.defineProperty(Element.prototype, 'dataset', descriptor);
	}
}

module.exports = elementDatasetPolyfill;

},{}]},{},[1])(1)
});